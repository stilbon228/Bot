import re
from database.database import insert_user_route
import xml.etree.ElementTree as ET
from selenium import webdriver
from bs4 import BeautifulSoup
import time
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from fake_useragent import UserAgent
from aiogram import Router, F  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ aiogram
from aiogram.filters import Command  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ–º–∞–Ω–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
from aiogram.types import Message, FSInputFile  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
import requests  # –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import os  # –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π

from buttons.buttons import get_main_keyboard, get_location_keyboard, \
    get_review_keyboard  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

router = Router()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
@router.message(Command("start"))
async def start_command(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ.",
        reply_markup=get_main_keyboard()
    )

class RouteStates(StatesGroup):
    waiting_for_route = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–∞
@router.message(Command(commands='review'))
async def review_command(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /review.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer(
        "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞?",
        reply_markup=get_review_keyboard()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞
    )


@router.message(F.text == "üëç –û—Ç–ª–∏—á–Ω–æ")
async def review_positive(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤! üòä")


@router.message(F.text == "üëé –ü–ª–æ—Ö–æ")
async def review_negative(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer("–°–æ–∂–∞–ª–µ–µ–º, —á—Ç–æ –≤–∞–º –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –ú—ã –±—É–¥–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º! üòî")


@router.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back_from_review(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –∏–∑ –æ–ø—Ä–æ—Å–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

@router.message(F.text == "üó∫Ô∏è –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç")
async def route_menu(message: Message, state: FSMContext):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–∏–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ —Å—Ç—Ä–µ–ª–∫—É ->.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–æ—Å–∫–≤–∞, –õ–µ–Ω–∏–Ω–∞ 10 -> –ü—É—à–∫–∏–Ω–∞ 5, –ú–æ—Å–∫–≤–∞"
    )
    await state.set_state(RouteStates.waiting_for_route)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞

@router.message(F.text == "–ù–∞–∑–∞–¥")
async def go_back(message: Message):

    await message.answer(
        "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=get_main_keyboard()
    )


@router.message(F.text == "–ü–æ–º–æ—â—å")
async def help_command(message: Message):
    await message.answer(
        "ü§ñ –ë–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ä—Ç–∞–º–∏ –∏ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏\n\n"
        "–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤\n"
        "- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n"
        "- –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏",
        reply_markup=get_main_keyboard()
    )
@router.message(F.text == "–ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
async def request_location(message: Message):
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=get_location_keyboard()
    )

@router.message(F.location)
async def handle_location(message: Message):
    location = message.location

    if location:
        response_message = (
            f"–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:\n"
            f"–®–∏—Ä–æ—Ç–∞: {location.latitude}\n"
            f"–î–æ–ª–≥–æ—Ç–∞: {location.longitude}"
        )

        await message.answer(
            response_message,
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=get_main_keyboard()
        )
def get_coordinates(api_key: str, address: str) -> tuple[float, float]:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Yandex Geocoder API.

    :param api_key: API –∫–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ Yandex API.
    :param address: –ê–¥—Ä–µ—Å –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è.
    :return: –ö–æ—Ä—Ç–µ–∂ —Å —à–∏—Ä–æ—Ç–æ–π –∏ –¥–æ–ª–≥–æ—Ç–æ–π.
    """
    url = "https://geocode-maps.yandex.ru/1.x/"
    params = {
        "apikey": api_key,
        "geocode": address,
        "format": "json"
    }

    response = requests.get(url, params=params)  # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å –∫ API

    if response.status_code == 200:
        data = response.json()  # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
        if data.get("response"):
            geo_object = data["response"]["GeoObjectCollection"]["featureMember"]
            if geo_object:
                point = geo_object[0]["GeoObject"]["Point"]["pos"].split()
                lat, lon = float(point[1]), float(point[0])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —à–∏—Ä–æ—Ç—É –∏ –¥–æ–ª–≥–æ—Ç—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
                return (lat, lon)
            else:
                return (None, None)
        else:
            return (None, None)
    else:
        raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Geocoder API: {response.status_code}")  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫


def parse_route(url: str) -> str:
    """
    –ü–∞—Ä—Å–∏—Ç –º–∞—Ä—à—Ä—É—Ç –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ GPX-—Ñ–∞–π–ª.

    :param url: URL –º–∞—Ä—à—Ä—É—Ç–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö.
    :return: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º—É GPX-—Ñ–∞–π–ª—É.
    """
    ua = UserAgent()  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ user-agent –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞—â–∏—Ç—ã —Å–∞–π—Ç–æ–≤ –æ—Ç –±–æ—Ç–æ–≤
    user_agent = ua.random

    options = webdriver.ChromeOptions()  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Chrome WebDriver
    options.add_argument(f"user-agent={user_agent}")
    options.add_argument("--headless")  # –ó–∞–ø—É—Å–∫ –≤ headless —Ä–µ–∂–∏–º–µ (–±–µ–∑ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞)
    options.add_argument("--no-sandbox")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã –¥—Ä–∞–π–≤–µ—Ä–∞
    options.add_argument("--disable-dev-shm-usage")  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é

    driver = webdriver.Chrome(options=options)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥—Ä–∞–π–≤–µ—Ä–∞ Chrome

    try:
        driver.get(url)  # –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É URL

        time.sleep(5)  # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        soup = BeautifulSoup(driver.page_source, 'html.parser')  # –ü–∞—Ä—Å–∏–Ω–≥ HTML-–∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –ø–æ–º–æ—â—å—é BeautifulSoup

        meta_tag = soup.find('meta', property='og:image:secure_url')  # –ü–æ–∏—Å–∫ —ç–ª–µ–º–µ–Ω—Ç–∞ <meta> —Å –Ω—É–∂–Ω—ã–º –∞—Ç—Ä–∏–±—É—Ç–æ–º

        if meta_tag and 'content' in meta_tag.attrs:
            image_url = meta_tag['content']  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –º–µ—Ç–∞-—Ç–µ–≥–∞

            match = re.search(r'pl=([^&]+)', image_url)  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pl –∏–∑ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if match:
                pl_param = match.group(1)

                coordinates = re.findall(r'-?\d+\.\d+', pl_param)  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ pl

                if len(coordinates) % 2 != 0:
                    print("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ—á—ë—Ç–Ω–æ–µ, –≤–æ–∑–º–æ–∂–Ω–æ, –¥–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã.")
                else:
                    route_points = [(float(coordinates[i]), float(coordinates[i + 1])) for i in
                                    range(0, len(coordinates), 2)]  # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–æ—á–µ–∫ –º–∞—Ä—à—Ä—É—Ç–∞

                    gpx = ET.Element("gpx", version="1.1", creator="Yandex Maps Parser")
                    trk = ET.SubElement(gpx, "trk")
                    ET.SubElement(trk, "name").text = "Yandex Maps Route"
                    trkseg = ET.SubElement(trk, "trkseg")

                    for lon, lat in route_points:
                        trkpt = ET.SubElement(trkseg, "trkpt", lat=str(lat), lon=str(lon))
                        ET.SubElement(trkpt, "ele").text = "0"
                        ET.SubElement(trkpt,
                                      "time").text = "2023-10-01T00:00:00Z"

                    gpx_data = ET.tostring(gpx, encoding='utf-8', method='xml')
                    with open("route.gpx", "wb") as gpx_file:
                        gpx_file.write(gpx_data)

                    print("–ú–∞—Ä—à—Ä—É—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ route.gpx")
                    return "route.gpx"
            else:
                print("–ü–∞—Ä–∞–º–µ—Ç—Ä pl –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ URL.")
        else:
            print("–≠–ª–µ–º–µ–Ω—Ç <meta> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    finally:
        driver.quit()  # –ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞



@router.message(RouteStates.waiting_for_route)
async def process_route_request(message: Message, state: FSMContext, config):

   try:
       if "->" not in message.text:
           return

       origin, destination = map(str.strip, message.text.split("->"))

       origin_coords = get_coordinates(config.yandex.api_key, origin)
       destination_coords = get_coordinates(config.yandex.api_key, destination)

       if not origin_coords[0] or not destination_coords[0]:
           await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–¥–∏–Ω –∏–∑ –∞–¥—Ä–µ—Å–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.")
           return

       route_url_1 = (
           f"https://yandex.ru/maps/?ll={origin_coords[1]},{origin_coords[0]}&mode=routes&rtext={origin_coords[0]},{origin_coords[1]}~{destination_coords[0]},{destination_coords[1]}=pd&ruri=~&z=16"
       )

       gpx_file_path = parse_route(route_url_1)
       insert_user_route(message.from_user.id, f"{origin} -> {destination}")

       await message.reply_document(FSInputFile(gpx_file_path), caption="–í–æ—Ç –≤–∞—à GPX —Ñ–∞–π–ª –º–∞—Ä—à—Ä—É—Ç–∞.")

       response_message = (
           f"–ù–∞—á–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: {origin}\n"
           f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {origin_coords[0]}, {origin_coords[1]}\n\n"
           f"–ö–æ–Ω–µ—á–Ω—ã–π –∞–¥—Ä–µ—Å: {destination}\n"
           f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {destination_coords[0]}, {destination_coords[1]}\n\n"
           f"–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ä—à—Ä—É—Ç: {route_url_1}\n"
       )

       os.remove(gpx_file_path)
       await state.clear()

       await message.reply(response_message)

   except Exception as e:
       await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")